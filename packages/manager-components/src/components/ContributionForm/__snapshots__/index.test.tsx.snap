// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ContributionForm should render correctly 1`] = `
<WithFormik(withHandlers(Component))
  dataValid={true}
  initialValues={
    Object {
      "amount": "",
      "total": "",
    }
  }
  melonAssetSymbol="MLN"
>
  <Formik
    dataValid={true}
    enableReinitialize={true}
    handleSubmit={[Function]}
    initialValues={
      Object {
        "amount": "",
        "total": "",
      }
    }
    isInitialValid={false}
    melonAssetSymbol="MLN"
    onSubmit={[Function]}
    render={[Function]}
    validateOnBlur={true}
    validateOnChange={true}
    validationSchema={[Function]}
  >
    <withHandlers(Component)
      dataValid={true}
      dirty={false}
      errors={Object {}}
      handleBlur={[Function]}
      handleChange={[Function]}
      handleReset={[Function]}
      handleSubmit={[Function]}
      initialValues={
        Object {
          "amount": "",
          "total": "",
        }
      }
      isSubmitting={false}
      isValid={false}
      isValidating={false}
      melonAssetSymbol="MLN"
      registerField={[Function]}
      resetForm={[Function]}
      setError={[Function]}
      setErrors={[Function]}
      setFieldError={[Function]}
      setFieldTouched={[Function]}
      setFieldValue={[Function]}
      setFormikState={[Function]}
      setStatus={[Function]}
      setSubmitting={[Function]}
      setTouched={[Function]}
      setValues={[Function]}
      submitCount={0}
      submitForm={[Function]}
      touched={Object {}}
      unregisterField={[Function]}
      validateField={[Function]}
      validateForm={[Function]}
      validateOnBlur={true}
      validateOnChange={true}
      values={
        Object {
          "amount": "",
          "total": "",
        }
      }
    >
      <Component
        dataValid={true}
        dirty={false}
        errors={Object {}}
        handleBlur={[Function]}
        handleChange={[Function]}
        handleReset={[Function]}
        handleSubmit={[Function]}
        initialValues={
          Object {
            "amount": "",
            "total": "",
          }
        }
        isSubmitting={false}
        isValid={false}
        isValidating={false}
        melonAssetSymbol="MLN"
        onChange={[Function]}
        registerField={[Function]}
        resetForm={[Function]}
        setError={[Function]}
        setErrors={[Function]}
        setFieldError={[Function]}
        setFieldTouched={[Function]}
        setFieldValue={[Function]}
        setFormikState={[Function]}
        setStatus={[Function]}
        setSubmitting={[Function]}
        setTouched={[Function]}
        setValues={[Function]}
        submitCount={0}
        submitForm={[Function]}
        touched={Object {}}
        unregisterField={[Function]}
        validateField={[Function]}
        validateForm={[Function]}
        validateOnBlur={true}
        validateOnChange={true}
        values={
          Object {
            "amount": "",
            "total": "",
          }
        }
      >
        <div
          className="jsx-__scopedHash contribution-form"
        >
          <JSXStyle
            css="__scoped"
            styleId="__scopedHash"
          />
          <h3
            className="jsx-__scopedHash"
          >
            ATTENTION REQUIRED: Contribution to 
            Naxos
          </h3>
          <p
            className="jsx-__scopedHash"
          >
            You are about to send ether to the 
            Naxos
             contract. Please type in the amount of ETH you wish to contribute in the
            Naxos
             Olympiad.
          </p>
          <Form
            onSubmit={[Function]}
          >
            <form
              className="form"
              onSubmit={[Function]}
            >
              <div
                className="jsx-__scopedHash contribution-form__input"
              >
                <Input
                  disabled={false}
                  formatNumber={true}
                  insideLabel="true"
                  label="Quantity of ETH to contribute"
                  name="amount"
                  onBlur={[Function]}
                  onChange={[Function]}
                  required={true}
                  value=""
                >
                  <div
                    className="jsx-__scopedHash input input--inside-label"
                  >
                    <JSXStyle
                      css="__scoped"
                      styleId="__scopedHash"
                    />
                    <span
                      className="jsx-__scopedHash input__label"
                    >
                      Quantity of ETH to contribute
                    </span>
                    <NumberFormat
                      allowEmptyFormatting={false}
                      allowNegative={true}
                      className="input__field"
                      decimalScale={4}
                      decimalSeparator="."
                      disabled={false}
                      displayType="input"
                      fixedDecimalScale={true}
                      getInputRef={[Function]}
                      isAllowed={[Function]}
                      isNumericString={true}
                      name="amount"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onMouseUp={[Function]}
                      onValueChange={[Function]}
                      prefix=""
                      suffix=""
                      type="text"
                      value=""
                    >
                      <input
                        className="input__field"
                        disabled={false}
                        name="amount"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onMouseUp={[Function]}
                        type="text"
                        value=""
                      />
                    </NumberFormat>
                    <div
                      className="jsx-__scopedHash input__error"
                    />
                  </div>
                </Input>
              </div>
              <div
                className="jsx-__scopedHash contribution-form__input"
              >
                <Input
                  disabled={false}
                  formatNumber={true}
                  insideLabel="true"
                  label="Estimated MLN to receive"
                  name="total"
                  onBlur={[Function]}
                  onChange={[Function]}
                  required={true}
                  value=""
                >
                  <div
                    className="jsx-__scopedHash input input--inside-label"
                  >
                    <JSXStyle
                      css="__scoped"
                      styleId="__scopedHash"
                    />
                    <span
                      className="jsx-__scopedHash input__label"
                    >
                      Estimated MLN to receive
                    </span>
                    <NumberFormat
                      allowEmptyFormatting={false}
                      allowNegative={true}
                      className="input__field"
                      decimalScale={4}
                      decimalSeparator="."
                      disabled={false}
                      displayType="input"
                      fixedDecimalScale={true}
                      getInputRef={[Function]}
                      isAllowed={[Function]}
                      isNumericString={true}
                      name="total"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onMouseUp={[Function]}
                      onValueChange={[Function]}
                      prefix=""
                      suffix=""
                      type="text"
                      value=""
                    >
                      <input
                        className="input__field"
                        disabled={false}
                        name="total"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onMouseUp={[Function]}
                        type="text"
                        value=""
                      />
                    </NumberFormat>
                    <div
                      className="jsx-__scopedHash input__error"
                    />
                  </div>
                </Input>
              </div>
              <div
                className="jsx-__scopedHash contribution-form__notification"
              >
                <Notification
                  isWarning={true}
                >
                  <div
                    className="jsx-__scopedHash notification notification--warning"
                  >
                    <JSXStyle
                      css="__scoped"
                      styleId="__scopedHash"
                    />
                    This step will transfer the desired amount of ETH from your wallet to the 
                    Naxos
                     Contribution contract. The
                    Naxos
                     Contribution contract will then invest the corresponding amount of MLN into your Melon fund (as per terms and conditions). By proceeding you acknowledge your understanding of the terms and conditions (
                    <a
                      className="jsx-__scopedHash"
                      href="https://github.com/melonproject/contribution/blob/master/misc/Second%20Contribution%20Terms%20%2B%20Naxos%20terms.pdf"
                      target="_blank"
                    >
                      <b
                        className="jsx-__scopedHash"
                      >
                        available here
                      </b>
                    </a>
                    ) and agree to cryptographically sign them.
                  </div>
                </Notification>
              </div>
              <div
                className="jsx-__scopedHash contribution-form__notification"
              >
                <Notification
                  isError={true}
                >
                  <div
                    className="jsx-__scopedHash notification notification--error"
                  >
                    <JSXStyle
                      css="__scoped"
                      styleId="__scopedHash"
                    />
                    Melonport AG cannot be held liable for any action resulting in fund loss while using the Melon software.
                  </div>
                </Notification>
              </div>
              <Button
                disabled={false}
                style="secondary"
                type="submit"
              >
                <button
                  className="jsx-__scopedHash button button--medium button--secondary"
                  disabled={false}
                  onClick={[Function]}
                  type="submit"
                >
                  <JSXStyle
                    css="__scoped"
                    styleId="__scopedHash"
                  />
                  I agree, sign and contribute
                </button>
              </Button>
            </form>
          </Form>
        </div>
      </Component>
    </withHandlers(Component)>
  </Formik>
</WithFormik(withHandlers(Component))>
`;

exports[`ContributionForm should render correctly without dataValid 1`] = `
<WithFormik(withHandlers(Component))
  dataValid={false}
  initialValues={
    Object {
      "amount": "",
      "total": "",
    }
  }
  melonAssetSymbol="MLN"
>
  <Formik
    dataValid={false}
    enableReinitialize={true}
    handleSubmit={[Function]}
    initialValues={
      Object {
        "amount": "",
        "total": "",
      }
    }
    isInitialValid={false}
    melonAssetSymbol="MLN"
    onSubmit={[Function]}
    render={[Function]}
    validateOnBlur={true}
    validateOnChange={true}
    validationSchema={[Function]}
  >
    <withHandlers(Component)
      dataValid={false}
      dirty={false}
      errors={Object {}}
      handleBlur={[Function]}
      handleChange={[Function]}
      handleReset={[Function]}
      handleSubmit={[Function]}
      initialValues={
        Object {
          "amount": "",
          "total": "",
        }
      }
      isSubmitting={false}
      isValid={false}
      isValidating={false}
      melonAssetSymbol="MLN"
      registerField={[Function]}
      resetForm={[Function]}
      setError={[Function]}
      setErrors={[Function]}
      setFieldError={[Function]}
      setFieldTouched={[Function]}
      setFieldValue={[Function]}
      setFormikState={[Function]}
      setStatus={[Function]}
      setSubmitting={[Function]}
      setTouched={[Function]}
      setValues={[Function]}
      submitCount={0}
      submitForm={[Function]}
      touched={Object {}}
      unregisterField={[Function]}
      validateField={[Function]}
      validateForm={[Function]}
      validateOnBlur={true}
      validateOnChange={true}
      values={
        Object {
          "amount": "",
          "total": "",
        }
      }
    >
      <Component
        dataValid={false}
        dirty={false}
        errors={Object {}}
        handleBlur={[Function]}
        handleChange={[Function]}
        handleReset={[Function]}
        handleSubmit={[Function]}
        initialValues={
          Object {
            "amount": "",
            "total": "",
          }
        }
        isSubmitting={false}
        isValid={false}
        isValidating={false}
        melonAssetSymbol="MLN"
        onChange={[Function]}
        registerField={[Function]}
        resetForm={[Function]}
        setError={[Function]}
        setErrors={[Function]}
        setFieldError={[Function]}
        setFieldTouched={[Function]}
        setFieldValue={[Function]}
        setFormikState={[Function]}
        setStatus={[Function]}
        setSubmitting={[Function]}
        setTouched={[Function]}
        setValues={[Function]}
        submitCount={0}
        submitForm={[Function]}
        touched={Object {}}
        unregisterField={[Function]}
        validateField={[Function]}
        validateForm={[Function]}
        validateOnBlur={true}
        validateOnChange={true}
        values={
          Object {
            "amount": "",
            "total": "",
          }
        }
      >
        <div
          className="jsx-__scopedHash contribution-form"
        >
          <JSXStyle
            css="__scoped"
            styleId="__scopedHash"
          />
          <h3
            className="jsx-__scopedHash"
          >
            ATTENTION REQUIRED: Contribution to 
            Naxos
          </h3>
          <p
            className="jsx-__scopedHash"
          >
            You are about to send ether to the 
            Naxos
             contract. Please type in the amount of ETH you wish to contribute in the
            Naxos
             Olympiad.
          </p>
          <Form
            onSubmit={[Function]}
          >
            <form
              className="form"
              onSubmit={[Function]}
            >
              <div
                className="jsx-__scopedHash contribution-form__input"
              >
                <Input
                  disabled={true}
                  formatNumber={true}
                  insideLabel="true"
                  label="Quantity of ETH to contribute"
                  name="amount"
                  onBlur={[Function]}
                  onChange={[Function]}
                  required={true}
                  value=""
                >
                  <div
                    className="jsx-__scopedHash input input--inside-label"
                  >
                    <JSXStyle
                      css="__scoped"
                      styleId="__scopedHash"
                    />
                    <span
                      className="jsx-__scopedHash input__label"
                    >
                      Quantity of ETH to contribute
                    </span>
                    <NumberFormat
                      allowEmptyFormatting={false}
                      allowNegative={true}
                      className="input__field"
                      decimalScale={4}
                      decimalSeparator="."
                      disabled={true}
                      displayType="input"
                      fixedDecimalScale={true}
                      getInputRef={[Function]}
                      isAllowed={[Function]}
                      isNumericString={true}
                      name="amount"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onMouseUp={[Function]}
                      onValueChange={[Function]}
                      prefix=""
                      suffix=""
                      type="text"
                      value=""
                    >
                      <input
                        className="input__field"
                        disabled={true}
                        name="amount"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onMouseUp={[Function]}
                        type="text"
                        value=""
                      />
                    </NumberFormat>
                    <div
                      className="jsx-__scopedHash input__error"
                    />
                  </div>
                </Input>
              </div>
              <div
                className="jsx-__scopedHash contribution-form__input"
              >
                <Input
                  disabled={true}
                  formatNumber={true}
                  insideLabel="true"
                  label="Estimated MLN to receive"
                  name="total"
                  onBlur={[Function]}
                  onChange={[Function]}
                  required={true}
                  value=""
                >
                  <div
                    className="jsx-__scopedHash input input--inside-label"
                  >
                    <JSXStyle
                      css="__scoped"
                      styleId="__scopedHash"
                    />
                    <span
                      className="jsx-__scopedHash input__label"
                    >
                      Estimated MLN to receive
                    </span>
                    <NumberFormat
                      allowEmptyFormatting={false}
                      allowNegative={true}
                      className="input__field"
                      decimalScale={4}
                      decimalSeparator="."
                      disabled={true}
                      displayType="input"
                      fixedDecimalScale={true}
                      getInputRef={[Function]}
                      isAllowed={[Function]}
                      isNumericString={true}
                      name="total"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onMouseUp={[Function]}
                      onValueChange={[Function]}
                      prefix=""
                      suffix=""
                      type="text"
                      value=""
                    >
                      <input
                        className="input__field"
                        disabled={true}
                        name="total"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onMouseUp={[Function]}
                        type="text"
                        value=""
                      />
                    </NumberFormat>
                    <div
                      className="jsx-__scopedHash input__error"
                    />
                  </div>
                </Input>
              </div>
              <p
                className="jsx-__scopedHash"
                style={
                  Object {
                    "color": "rgb(209, 102, 102)",
                  }
                }
              >
                Contribution not authorized when price feed down
              </p>
              <div
                className="jsx-__scopedHash contribution-form__notification"
              >
                <Notification
                  isWarning={true}
                >
                  <div
                    className="jsx-__scopedHash notification notification--warning"
                  >
                    <JSXStyle
                      css="__scoped"
                      styleId="__scopedHash"
                    />
                    This step will transfer the desired amount of ETH from your wallet to the 
                    Naxos
                     Contribution contract. The
                    Naxos
                     Contribution contract will then invest the corresponding amount of MLN into your Melon fund (as per terms and conditions). By proceeding you acknowledge your understanding of the terms and conditions (
                    <a
                      className="jsx-__scopedHash"
                      href="https://github.com/melonproject/contribution/blob/master/misc/Second%20Contribution%20Terms%20%2B%20Naxos%20terms.pdf"
                      target="_blank"
                    >
                      <b
                        className="jsx-__scopedHash"
                      >
                        available here
                      </b>
                    </a>
                    ) and agree to cryptographically sign them.
                  </div>
                </Notification>
              </div>
              <div
                className="jsx-__scopedHash contribution-form__notification"
              >
                <Notification
                  isError={true}
                >
                  <div
                    className="jsx-__scopedHash notification notification--error"
                  >
                    <JSXStyle
                      css="__scoped"
                      styleId="__scopedHash"
                    />
                    Melonport AG cannot be held liable for any action resulting in fund loss while using the Melon software.
                  </div>
                </Notification>
              </div>
              <Button
                disabled={true}
                style="secondary"
                type="submit"
              >
                <button
                  className="jsx-__scopedHash button button--medium button--secondary"
                  disabled={true}
                  onClick={[Function]}
                  type="submit"
                >
                  <JSXStyle
                    css="__scoped"
                    styleId="__scopedHash"
                  />
                  I agree, sign and contribute
                </button>
              </Button>
            </form>
          </Form>
        </div>
      </Component>
    </withHandlers(Component)>
  </Formik>
</WithFormik(withHandlers(Component))>
`;
