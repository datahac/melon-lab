# Fields that are only safe within the native app environment and are blocked
# from execution in the hosted / web environment.
directive @authenticated on FIELD
directive @sign(source: String = "unsigned", target: String = "signed") on FIELD
directive @signMessage on FIELD
directive @account(arg: String = "from") on FIELD

scalar DateTime

enum ExchangeEnum {
  RADAR_RELAY
  OASIS_DEX
  KYBER_NETWORK
  ETHFINEX
}

enum OrderTypeEnum {
  ASK
  BID
}

enum FundSetupStepEnum {
  CREATE_ACCOUNTING
  CREATE_FEE_MANAGER
  CREATE_PARTICIPATION
  CREATE_POLICY_MANAGER
  CREATE_SHARES
  CREATE_TRADING
  CREATE_VAULT
}

enum PolicyTypeEnum {
  TRADE
  INVEST
}

interface Order {
  id: String
  trade: Price!
  price: String
  volume: String!
  type: OrderTypeEnum!
  exchange: ExchangeEnum!
}

type EthfinexOrder implements Order {
  id: String
  trade: Price!
  price: String
  volume: String!
  type: OrderTypeEnum!
  exchange: ExchangeEnum!
  metadata: ZeroExOrderMetadata
}

type ZeroExOrder implements Order {
  id: String
  trade: Price!
  price: String
  volume: String!
  type: OrderTypeEnum!
  exchange: ExchangeEnum!
  metadata: ZeroExOrder
}

type OasisDexOrder implements Order {
  id: String
  trade: Price!
  price: String
  volume: String!
  type: OrderTypeEnum!
  exchange: ExchangeEnum!
  metadata: OasisDexOrderMetadata
}

type KyberNetworkOrder implements Order {
  id: String
  trade: Price!
  price: String
  volume: String!
  type: OrderTypeEnum!
  exchange: ExchangeEnum!
}

type ZeroExOrderMetadata {
  exchangeAddress: String!
  senderAddress: String!
  makerAddress: String!
  takerAddress: String!
  makerAssetData: String!
  takerAssetData: String!
  feeRecipientAddress: String!
  makerAssetAmount: String!
  takerAssetAmount: String!
  makerFee: String!
  takerFee: String!
  expirationTimeSeconds: Int!
  salt: String!
  signature: String
}

type SignedZeroExOrderMetadata {
  exchangeAddress: String!
  senderAddress: String!
  makerAddress: String!
  takerAddress: String!
  makerAssetData: String!
  takerAssetData: String!
  feeRecipientAddress: String!
  makerAssetAmount: String!
  takerAssetAmount: String!
  makerFee: String!
  takerFee: String!
  expirationTimeSeconds: Int!
  salt: String!
  signature: String!
}

type OasisDexOrderMetadata {
  id: String!
  maker: String
  taker: String
  isActive: Boolean!
  exchangeContractAddress: String
}

type Price {
  base: Quantity
  quote: Quantity
}

type Quantity {
  token: Token
  quantity: String
}

type Token {
  symbol: String
  decimals: Int
  address: String
}

type Ranking {
  id: String
  rank: Int
  address: String
  name: String
  inception: DateTime
  fund: Fund
  sharePrice: Price
}

type Routes {
  accountingAddress: String
  feeManagerAddress: String
  participationAddress: String
  policyManagerAddress: String
  priceSourceAddress: String
  registryAddress: String
  sharesAddress: String
  tradingAddress: String
  vaultAddress: String
  versionAddress: String
}

type Fund {
  id: String
  rank: Int
  address: String
  name: String
  inception: DateTime
  gav: Quantity
  nav: Quantity
  owner: String
  routes: Routes
  denominationAsset: Token
  nativeAsset: Token
  holdings: [Holding]
  sharePrice: Price
  totalSupply: Quantity
  personalStake(investor: String): Quantity
  managementReward: Quantity
  managementFeeRate: String
  performanceReward: Quantity
  performanceFeeRate: String
  unclaimedFees: Quantity
  feesShareQuantity: Quantity
  isShutdown: Boolean
  isComplete: Boolean
}

type Holding {
  balance: Quantity!
  price: Price!
  fraction: String!
}

type Trade {
  price: Price
  quantity: Quantity
  timestamp: String
  type: String
}

type Signature {
  r: String!
  s: String!
  v: Int!
}

type ExchangeConfig {
  adapterAddress: String!
  exchangeAddress: String!
  takesCustody: Boolean!
}

type AdapterAddresses {
  kyberAdapter: String!
  matchingMarketAdapter: String!
  zeroExAdapter: String!
}

type PolicyAddresses {
  priceTolerance: String!
  userWhitelist: String!
}

type FactoryAddresses {
  accountingFactory: String!
  feeManagerFactory: String!
  participationFactory: String!
  policyManagerFactory: String!
  sharesFactory: String!
  tradingFactory: String!
  vaultFactory: String!
}

type ThirdPartyContracts {
  exchanges: [ExchangeConfig]!
  tokens: [Token]!
}

type MelonContracts {
  priceSource: String!
  adapters: AdapterAddresses!
  policies: PolicyAddresses!
  engine: String!
  registry: String!
  version: String!
  ranking: String!
}

type Deployment {
  melonContracts: MelonContracts!
  thirdPartyContracts: ThirdPartyContracts!
  version: String
  ranking: String
  tokens: [Token]
}

type UnsignedTransaction {
  data: String
  from: String
  gas: String
  gasPrice: String
  to: String
  value: String
}

input UnsignedTransactionInput {
  data: String
  from: String
  gas: String
  gasPrice: String
  to: String
  value: String
}

input PolicyInput {
  address: String!
  type: PolicyTypeEnum!
}

input SignZeroExOrderInput {
  exchangeAddress: String!
  senderAddress: String!
  makerAddress: String!
  takerAddress: String!
  makerAssetData: String!
  takerAssetData: String!
  feeRecipientAddress: String!
  makerAssetAmount: String!
  takerAssetAmount: String!
  makerFee: String!
  takerFee: String!
  expirationTimeSeconds: Int!
  salt: String!
}

type Query {
  defaultAccount: String
  allAccounts: [String]
  hasStoredWallet: Boolean

  "Fetch the associated fund of an account."
  associatedFund(
    "The address of the account to load the fund for."
    manager: String
  ): String

  "Loads a fund by its name."
  fundByName("The name of the fund to load." name: String!): Fund

  network: String
  currentBlock: String
  nodeSynced: Boolean
  priceFeedUp: Boolean
  peerCount: String
  contractDeployment: Deployment
  totalFunds: Int
  balance(symbol: String!, address: String): Quantity
  fund(address: String!): Fund
  rankings: [Ranking]
  orders(exchange: ExchangeEnum!, base: String!, quote: String!): [Order]

  "Loads the current routes for fund creation for a fund manager address."
  routes("The address of the fund manager." manager: String): Routes
}

type Mutation {
  # TODO: Give more fund configuration options: Policies, pricefeed, ...
  """
  Estimates the number of gas units required for the "beginSetup" transaction.
  """
  estimateFundSetupBegin(
    name: String!
    exchanges: [String]!
    performanceFee: Float!
    managementFee: Float!
  ): UnsignedTransaction

  """
  Executes the "beginSetup" transaction with the given gas price per unit.
  """
  executeFundSetupBegin(
    "Unsigned transaction data."
    unsigned: UnsignedTransactionInput!
  ): String

  """
  Estimates the number of gas units required for a fund setup step transaction.
  """
  estimateFundSetupStep(
    "The step in the fund factory process."
    step: FundSetupStepEnum!
  ): UnsignedTransaction

  """
  Executes a fund setup step transaction with the given gas price per unit.
  """
  executeFundSetupStep(
    "Unsigned transaction data."
    unsigned: UnsignedTransactionInput!
    "The step in the fund factory process."
    step: FundSetupStepEnum!
  ): Boolean

  """
  Estimates the number of gas units required for the "completeSetup" transaction.
  """
  estimateFundSetupComplete: UnsignedTransaction

  """
  Executes the "completeSetup" transaction with the given gas price per unit.
  """
  executeFundSetupComplete(
    "Unsigned transaction data."
    unsigned: UnsignedTransactionInput!
  ): String

  """
  Estimates the number of gas units required for the "request investment" transaction.
  """
  estimateRequestInvestment(
    fundAddress: String!
    investmentAmount: String!
  ): UnsignedTransaction

  """
  Executes the "request investment" transaction with the given gas price per unit.
  """
  executeRequestInvestment(
    "Unsigned transaction data."
    unsigned: UnsignedTransactionInput!
    fundAddress: String!
  ): Boolean

  """
  Estimates the number of gas units required for the "execute request" transaction.
  """
  estimateExecuteRequest(fundAddress: String!): UnsignedTransaction

  """
  Executes the "execute request" transaction with the given gas price per unit.
  """
  executeExecuteRequest(
    "Unsigned transaction data."
    unsigned: UnsignedTransactionInput!
    fundAddress: String!
  ): Boolean

  """
  Estimates the number of gas units required for the "approve transfer" transaction.
  """
  estimateApproveTransfer(
    fundAddress: String!
    investmentAmount: String!
  ): UnsignedTransaction

  """
  Executes the "execute request" transaction with the given gas price per unit.
  """
  executeShutDownFund(
    "Unsigned transaction data."
    unsigned: UnsignedTransactionInput!
    fundAddress: String!
  ): Boolean

  """
  Estimates the number of gas units required for the "approve transfer" transaction.
  """
  estimateShutDownFund(fundAddress: String!): UnsignedTransaction

  """
  Executes the "approve transfer" transaction with the given gas price per unit.
  """
  executeApproveTransfer(
    "Unsigned transaction data."
    unsigned: UnsignedTransactionInput!
    fundAddress: String!
    investmentAmount: String!
  ): Boolean

  """
  Estimates the number of gas units required for the "trigger reward all fees" transaction.
  """
  estimateTriggerRewardAllFees(fundAddress: String!): UnsignedTransaction

  """
  Executes the "trigger reward all fees" transaction with the given gas price per unit.
  """
  executeTriggerRewardAllFees(
    "Unsigned transaction data."
    unsigned: UnsignedTransactionInput!
    fundAddress: String!
  ): Quantity

  """
  Estimates the number of gas units required for the "make order" transaction.
  """
  # TODO: Rename to estimateOasisDexOrder and remove exchange enum
  estimateMakeOrder(
    exchange: ExchangeEnum!
    buyToken: String!
    buyQuantity: String!
    sellToken: String!
    sellQuantity: String!
  ): UnsignedTransaction

  """
  Executes the "make order" transaction with the given gas price per unit.
  """
  # TODO: Rename to executeOasisDexOrder
  executeMakeOrder(
    "Unsigned transaction data."
    unsigned: UnsignedTransactionInput!
    exchange: ExchangeEnum!
  ): OasisDexOrder

  estimateTakeOasisDexOrder(
    id: String!
    fillQuantity: String
  ): UnsignedTransaction

  executeTakeOasisDexOrder(unsigned: UnsignedTransactionInput!): Trade

  """
  Estimates the number of gas units required for the "cancel order" transaction.
  """
  estimateCancelOrder(
    exchange: ExchangeEnum!
    id: String!
    buyToken: String!
    sellToken: String!
  ): UnsignedTransaction

  """
  Executes the "cancel order" transaction with the given gas price per unit.
  """
  executeCancelOrder(
    "Unsigned transaction data."
    unsigned: UnsignedTransactionInput!
    exchange: ExchangeEnum!
  ): Boolean

  create0xOrder(
    buyToken: String!
    buyQuantity: String!
    sellToken: String!
    sellQuantity: String!
  ): ZeroExOrderMetadata

  createEthfinexOrder(
    buyToken: String!
    buyQuantity: String!
    sellToken: String!
    sellQuantity: String!
  ): ZeroExOrderMetadata

  # Policies
  estimateDeployUserWhitelist(addresses: [String]): UnsignedTransaction
  estimateDeployAssetBlacklist(symbols: [String]): UnsignedTransaction
  estimateDeployAssetWhitelist(symbols: [String]): UnsignedTransaction
  estimateDeployMaxConcentration(percent: Float): UnsignedTransaction
  estimateDeployMaxPositions(positions: Int): UnsignedTransaction
  estimateDeployPriceTolerance(percent: Int): UnsignedTransaction
  executeDeploy(unsigned: UnsignedTransactionInput): String

  estimateRegisterPolicies(policies: [PolicyInput]!): UnsignedTransaction
  executeRegisterPolicies(unsigned: UnsignedTransactionInput): Boolean

  """
  Export the currently active wallet in its encrypted form.
  """
  exportWallet(
    "The password for decrypting the wallet."
    password: String!
  ): String

  """
  Log out of the current wallet and delete its encrypted representation
  from local storage. This requires the user to either re-upload the
  encrypted wallet or restore it from its mnemonic when attempting to
  log in again.
  """
  deleteWallet: Boolean!

  """
  Log in to a previously stored wallet. Returns a list of possible account
  addresses from the wallet.
  """
  loginWallet(
    "The password for decrypting the wallet."
    password: String!
  ): [String]

  """
  Import and log in to wallet using a wallet JSON. Within the native app
  environment, this will cause the encrypted wallet to be stored locally
  for future use.
  """
  importWallet(
    "The encrypted wallet."
    wallet: String!
    "The password for decrypting the wallet."
    password: String!
  ): [String]

  """
  Restore and login to a wallet using a mnemonic. Within the native app
  environment,this will cause the encrypted wallet to be stored locally
  for future use.
  """
  restoreWallet(
    "The mnemonic to restore the wallet with."
    mnemonic: String!
    "The password for decrypting the wallet."
    password: String!
  ): [String]

  """
  Randomly generate a new mnemonic phrase.
  """
  generateMnemonic: String
}

type Subscription {
  currentBlock: String
  nodeSynced: Boolean
  priceFeedUp: Boolean
  peerCount: String
  balance(symbol: String!, address: String): Quantity
}

schema {
  query: Query
  subscription: Subscription
  mutation: Mutation
}
